apply plugin: "jacoco"
apply plugin: 'com.github.kt3k.coveralls'

def coverageSourceDirs = [
        'App/src/main/java',
        'Core/src/main/java']


def applyDaggerWorkaround(String pathWithDaggerClasses) {
    def filePath = new File(pathWithDaggerClasses)
    if (filePath.exists()) {
        filePath.eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

def revertDaggerWorkaround(String pathWithDaggerClasses) {
    def filePath = new File(pathWithDaggerClasses)
    if (filePath.exists()) {
        filePath.eachFileRecurse { file ->
            if (file.name.contains('$ModuleAdapter')) {
                file.renameTo(file.path.replace('$ModuleAdapter', '$$ModuleAdapter'))
            }
            if (file.name.contains('$InjectAdapter')) {
                file.renameTo(file.path.replace('$InjectAdapter', '$$InjectAdapter'))
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    // exclude generated classes from code coverage report because not all generated methods will be used
    def defaultExcludes = ['**/R.class', '**/R$*.class', '**/*_*', '**/Buildconfig.class', '**/*InjectAdapter.class', '**/*ModuleAdapter*.class', '**/BuildConfig.class']

    classDirectories = fileTree(dir: 'App/build/intermediates/classes/debug', excludes: defaultExcludes)
    classDirectories + fileTree(dir: 'AppCT/build/intermediates/classes/debug', exclude: defaultExcludes)
    classDirectories + fileTree(dir: 'Core/build/intermediates/classes/debug', exclude: defaultExcludes)

    additionalSourceDirs = files(coverageSourceDirs)
    executionData = files(
            'App/build/outputs/code-coverage/connected/coverage.ec',
            'App/build/jacoco/testDebug.exec',
            'Core/build/jacoco/testDebug.exec')

    // fix issue with double $$ at generate report task
    doFirst {
        applyDaggerWorkaround('App/build/intermediates/classes/')
        applyDaggerWorkaround('Core/build/intermediates/classes/')
    }
    // avoid some side effects through revert renaming
    doLast {
        revertDaggerWorkaround('App/build/intermediates/classes/')
        revertDaggerWorkaround('Core/build/intermediates/classes/')
    }
}
